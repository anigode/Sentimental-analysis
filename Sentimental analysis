#!/usr/bin/env python
# coding: utf-8

 


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk


 


# Read in data
data = pd.read_csv("C:/Users/Aniket/Desktop/PROJECTS/Sentimental analysis/Reviews.csv")
print(data.shape)
data = data.head(500)
print(data.shape)


 


data.head


# ## EDA

 


ax = data['Score'].value_counts().sort_index() \
    .plot(kind='bar',
          title='Reviews by Stars',
          figsize=(10, 5))
ax.set_xlabel('Stars According to Review')
plt.show()


# ## NLTK

 


example = data['Text'][50]
print(example)


 


tokens = nltk.word_tokenize(example)
tokens[:10]


 


tagged = nltk.pos_tag(tokens)
tagged[:10]


 


entities = nltk.chunk.ne_chunk(tagged)
entities.pprint()


# ## Sentiment Analyzer

 


from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()


 


sia.polarity_scores('I am so happy!')


 


sia.polarity_scores('This is the worst thing ever.')


 


sia.polarity_scores(example)


 


# Run the polarity score on the entire dataset
res = {}
for i, row in tqdm(data.iterrows(), total=len(data)):
    text = row['Text']
    myid = row['Id']
    res[myid] = sia.polarity_scores(text)


 


vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'Id'})
vaders = vaders.merge(data, how='left')


 


# Now we have sentiment score and metadata
vaders.head()


# ## Ploting

 


ax = sns.barplot(data=vaders, x='Score', y='compound')
ax.set_title('Compund Score of Amazon by Star Review')
plt.show()


 


fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='Score', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Score', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Score', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()


# ## Roberta Pretrained Model

 


from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax


 


MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
Tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)


 


# VADER results on example
print(example)
sia.polarity_scores(example)


 


# Run for Roberta Model
encoded_text = Tokenizer(example, return_tensors='pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)


 


def polarity_scores_roberta(example):
    encoded_text = Tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg' : scores[0],
        'roberta_neu' : scores[1],
        'roberta_pos' : scores[2]
    }
    return scores_dict


 


res = {}
for i, row in tqdm(data.iterrows(), total=len(data)):
    try:
        text = row['Text']
        myid = row['Id']
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[myid] = both
    except RuntimeError:
        print(f'Broke for id {myid}')


 


results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'Id'})
results_df = results_df.merge(data, how='left')


 


results_df.columns


# ## combine and compare

 


sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos',
                  'roberta_neg', 'roberta_neu', 'roberta_pos'],
            hue='Score',
            palette='tab10')
plt.show()


 


results_df.query('Score == 1') \
    .sort_values('roberta_pos', ascending=False)['Text'].values[0]


 


results_df.query('Score == 1') \
    .sort_values('vader_pos', ascending=False)['Text'].values[0]


# ## nevative sentiment 5-Star view

 


results_df.query('Score == 5') \
    .sort_values('roberta_neg', ascending=False)['Text'].values[0]


 


results_df.query('Score == 5') \
    .sort_values('vader_neg', ascending=False)['Text'].values[0]


# ## Transfprmers Pipeline

 


from transformers import pipeline

sent_pipeline = pipeline("sentiment-analysis")


 


sent_pipeline('I love sentiment analysis!')


 


sent_pipeline('Make sure to like and subscribe!')


 


sent_pipeline('booo')


 




